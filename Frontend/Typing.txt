01>01
소스 선두에 use strict = 변수 미선언 후 사용시 오류 발생시키기

  >02
  JS에서 함수가 자료형으로 인식 대입 ㄱㄴ 함수 매개변수로 전달 ㄱㄴ
  Nan/0/null/undefined === false

   lazy evaluation 이미 | & 결과가 정해졌다면 뒤쪽 연산 대상은 실행 x

02>01
  v-model 지시자의 값은 앱의 속성명이다.
  v-show v-if v-bind===: 안쓰면 스트링
  >02
  여러 단어로 구성된 변수 이름이나 메소드 이름을 표기하는 방식
- camel case
- snake case
- kebab case
- Pascal case
예 camel case snake case kebab case Pascal case
font size fontSize font_size font-size FontSize
left margin leftMargin left_maring left-margin LeftMargin
background color backgroundColor background_color background-color BackgroundColor
Java 변수명, 속성명, 메소드 이름은 camel case 방식이 관례이다.
Java 클래스 이름은 Pascal case 방식이 관례이다.
C 변수 함수 이름은 snake case 방식이 관례이다.
CSS 서식 이름은 kebab case 이다.
예: font-size, margin-left, background-color


v-bind : js 객체
.green {bgcolor-green};
{green:value} - 동적 서식
value = true 일 때 green 서식 적용.

native > react > vue 

메소드의 리턴값을 출력하는 형태로 구현하면, 
화면을 다시 그릴 때 마다 메소드가 다시 호출된다.
계산 속성의 값을 출력하는 형태로 구현하면,
getter 메소드의 리턴값이 캐시에 저장된 후 화면에 출력된다.

#### 22-04-27 
- Vue - 데이터 변경시 즉시 리로드
- js문법상 this 대부분 사용
- css 분리 가시성 성능 양득
  - 분리된 서식파일은 서버 캐시에 등록-성능 향상.
  - *플젝시 자주 사용되는 서식만 분리해놓으면 성능 향상.*
- v-model 양방향 특성. 
` ` `
//js 문법 활용. 코드 간소화/자원 효율화
deleteTodo: function () {
    let list = [];
    for (let i = 0; i < this.todoList.length; ++i)
        if (!this.checked[i])
            list.push(this.todoList[i]);
    this.todoList = list;
    this.checked = [];
}
` ` `
- 메소드/computed 활용 장단 - computed는 다시 계산할 필요 없으면 기존값 재활용.



22-05-09 
IO asynchronous call : js 모든 데이터 전송 async로.
요청과 동시에 이동. 이후 요청 응답시(then) 정의된 함수 실행
catch 유사. catch하려는 결과 캐치시 정의된 함수 실행

CPU >> IO 속도차 극복을 위한 콜백 함수 기법 활용.
코드의 순서와 실제 실행 순서가 상이

~ 지금까지 코드들은 정규 js문법에 속해 컴파일 필요 없이 실행 가능.
Vue 문법에 맞춰 제대로 작성된 js는 확장된 js문법.
- transpile 필요. 확장 코드 확장자-vue 트랜스파일 후-js (Babel)
    IE11도 실행가능. ES5문법 사용
- 압축
    코드 크기에 따라 실행 속도 저하 가능.
    minify 필드명 축소, 연속 공백/개행 단축, 주석 제거 - 파일 크기 감소 확장자-min.js

transpile minify babel webpack eslint
maven -> gradle 추세의 전환

CLI <> GUI

2022-05-25
mounted life-cycle method == onCreate()
webB c++객체 == DOM         slow
Virtual == JS로 구현된 객체 fast

flow = Virtual DOM(이전 화면) + Virtual DOM(현재 화면)구현 > VD 비교
VD - 변환된 페이지간 차이 분석 및 필요한 부분만 추가 구현.

VD-렌더링 / RD - 업데이트

beforeDestroy > beForeUnmount
